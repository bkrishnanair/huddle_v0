rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Events collection
    match /events/{eventId} {
      // Anyone authenticated can read events (to see them on the map)
      allow read: if request.auth != null;
      
      // Only authenticated users can create events
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.createdBy;
      
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players', 'currentPlayers'])
      );
      
      // Only the event creator can delete events
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.createdBy;
      
      // Chat subcollection for each event
      match /chat/{messageId} {
        // Only event participants can read chat messages
        allow read: if request.auth != null 
          && isEventParticipant(eventId);
        
        allow create: if request.auth != null
          && isEventParticipant(eventId)
          && request.auth.uid == request.resource.data.senderId;
        
        allow delete: if request.auth != null 
          && request.auth.uid == resource.data.senderId;
      }
    }
    
    function isEventParticipant(eventId) {
      let eventData = get(/databases/$(database)/documents/events/$(eventId)).data;
      return request.auth.uid == eventData.createdBy 
        || request.auth.uid in eventData.players;
    }
  }
}
